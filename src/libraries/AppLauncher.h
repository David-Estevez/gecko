//------------------------------------------------------------------------------
//-- AppLauncher
//------------------------------------------------------------------------------
//--
//--  Launchs applications triggered by events generated by StateMachine (s)
//--
//------------------------------------------------------------------------------
//--
//-- This file belongs to the "Gecko - Gesture Recognition" project
//-- (https://github.com/David-Estevez/gecko)
//--
//------------------------------------------------------------------------------
//-- Authors: David Estevez Fernandez
//--          Irene Sanz Nieto
//--
//-- Released under the GPL license (more info on LICENSE.txt file)
//------------------------------------------------------------------------------

/*! \file AppLauncher.h
 *  \brief Launchs applications triggered by events generated by StateMachine (s)
 *
 * \author David Estevez Fernandez ( http://github.com/David-Estevez )
 * \author Irene Sanz Nieto ( https://github.com/irenesanznieto )
 * \date Dec 12th, 2013
 */

#ifndef APPLAUNCHER_H
#define APPLAUNCHER_H

#include <cstdlib>
#include <unistd.h>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

#include "StateMachine.h"

/*! \class AppLauncher
 *  \brief Launchs applications triggered by events generated by StateMachine (s)
 *
 *  This class loads the programs and values that trigger them from a file.
 *
 *  The format of the file is:
 *
 *  $program1$ 1
 *
 *  $program2$ 2
 *
 *  Where the string between the dollar characters is the command to launch and the
 *  value at the end of each line is the value that triggers that commands.
 */
class AppLauncher
{
    public:
        /*! \brief AppLauncher constructor
         *  \param config_file Path of the configuration file containing the program info
         *  \param positive_matches Minimum number of positive matches needed to trigger a command
         *  \param negative_matches Maximum number of negative matches allowed between two positive matches
         */
        AppLauncher( std::string config_file, int positive_matches, int negative_matches);

        /*!
         * \brief AppLauncher constructor
         *  \param config_file Path of the configuration file containing the program info
         *  \param positive_matches Vector containing the minimum number of positive matches needed to
         *         trigger each command individually
         *  \param negative_matches Vector containing the maximum number of negative matches allowed
         *         between two positive matches for each command individually
         */
        AppLauncher( std::string config_file, std::vector<int> positive_matches, std::vector<int> negative_matches);

        /*! \brief Update the state of internal state machines and trigger the corresponding commands
         *  \param current_value Current value to compare with the value to track in all internal state machines
         */
        void update( int current_value);

        //! \brief Returns the current number of positive matches of the ith value as a percentage
        float getPercentageMatches(int i);

        //! \brief Gets the current state of the ith state machine
        bool getFound(int i);

        //! \brief Returns the current value set to track for the ith command
        int getValueToTrackAt(int i);

         //! \brief Returns the number of commands loaded
        int getNumberOfCommands();

    private:
        /*!
         * \brief Reads and parses a configuration file containing the commands and values that trigger them
         * \param config_file Path to the configuration file
         */
        void configFileParser( std::string config_file);

        std::vector<StateMachine> _state_machines;      //!< \brief Vector containing the state machines for each command
        std::vector<std::string> _commands_to_launch;   //!< \brief Vector containing the commmands to launch for each value
        std::vector<int> _values_to_track;              //!< \brief Vector containing the values that trigger each command

        std::vector<bool> _found;                       //!< \brief Vector containing the current state of each state machine

};

#endif
